// --- Polyfills and Helpers ---
const generateId = () => '_' + Math.random().toString(36).substring(2, 11);
const simpleHash = (str) => { if (!str) return ''; let hash = 0; for (let i = 0; i < str.length; i++) { const char = str.charCodeAt(i); hash = ((hash << 5) - hash) + char; hash |= 0; } return hash.toString(); };
function debounce(func, wait) { let timeout; return function executedFunction(...args) { const later = () => { clearTimeout(timeout); func(...args); }; clearTimeout(timeout); timeout = setTimeout(later, wait); }; }

// --- Application State ---
let state = { currentUser: null, currentView: 'loginView', users: [], courses: [], jobs: [], guidanceRequests: [], isNotificationPanelOpen: false };

// --- DOM Elements ---
const views = document.querySelectorAll('.view'); const navLinks = document.getElementById('navLinks'); const alertMessage = document.getElementById('alertMessage'); const notificationPanel = document.getElementById('notificationPanel'); const notificationList = document.getElementById('notificationList'); const loginForm = document.getElementById('loginForm'); const registerForm = document.getElementById('registerForm'); const guidanceForm = document.getElementById('guidanceForm'); const profileForm = document.getElementById('profileForm'); const progressForm = document.getElementById('progressForm'); const adminAddCourseForm = document.getElementById('adminAddCourseForm'); const adminAddJobForm = document.getElementById('adminAddJobForm'); const dashboardUsername = document.getElementById('dashboardUsername'); const dashboardCourses = document.getElementById('dashboardCourses'); const dashboardJobs = document.getElementById('dashboardJobs'); const dashboardGuidance = document.getElementById('dashboardGuidance'); const courseList = document.getElementById('courseList'); const jobList = document.getElementById('jobList'); const progressList = document.getElementById('progressList'); const myGuidanceRequests = document.getElementById('myGuidanceRequests'); const jobSearchInput = document.getElementById('jobSearchInput'); const adminUserTableBody = document.querySelector('#adminUserTable tbody'); const adminCourseTableBody = document.querySelector('#adminCourseTable tbody'); const adminJobTableBody = document.querySelector('#adminJobTable tbody'); const adminGuidanceTableBody = document.querySelector('#adminGuidanceTable tbody');

// --- Data Persistence ---
const saveData = () => { try { const dataToSave = { users: state.users, courses: state.courses, jobs: state.jobs, guidanceRequests: state.guidanceRequests }; localStorage.setItem('trendsWithTechData', JSON.stringify(dataToSave)); localStorage.setItem('trendsWithTechCurrentUser', state.currentUser ? state.currentUser.id : ''); console.log("Data saved."); } catch (e) { console.error("Error saving data:", e); showAlert("Error saving data.", 'error'); } };
const loadData = () => { console.log("Loading data..."); const data = localStorage.getItem('trendsWithTechData'); const currentUserId = localStorage.getItem('trendsWithTechCurrentUser'); try { if (data) { const parsedData = JSON.parse(data); state.users = parsedData.users || []; state.courses = parsedData.courses || []; state.jobs = parsedData.jobs || []; state.guidanceRequests = parsedData.guidanceRequests || []; state.users.forEach(user => { user.profile = user.profile || { name: '', degree: '', skills: [], goals: '', progress: [], isAdmin: false }; user.profile.progress = user.profile.progress || []; user.registeredCourses = user.registeredCourses || []; user.appliedJobs = user.appliedJobs || []; user.guidanceRequests = user.guidanceRequests || []; user.notifications = user.notifications || []; }); if (currentUserId) { state.currentUser = state.users.find(u => u.id === currentUserId) || null; if(state.currentUser) console.log("Restored session:", state.currentUser.username); } else { state.currentUser = null; } } else { initializeDefaultData(); saveData(); } } catch (e) { console.error("Error loading data:", e); showAlert("Error loading data. Resetting.", "error"); initializeDefaultData(); saveData(); } };
const initializeDefaultData = () => { console.log("Initializing default data..."); state.users = [ { id: 'admin_user', username: 'admin', passwordHash: simpleHash('adminpass'), email: 'admin@trends.tech', profile: { name: 'Admin User', degree: 'Sys Admin', skills: ['Mgmt'], goals: 'Maintain', progress: [{ text: 'Launched', date: new Date().toISOString() }], isAdmin: true }, registeredCourses: [], appliedJobs: [], guidanceRequests: [], notifications: [] } ]; state.courses = [ { id: generateId(), title: 'Intro AI/ML', description: 'Fundamentals of AI & ML concepts.', category: 'AI', prerequisites: [] }, { id: generateId(), title: 'Cloud Essentials', description: 'Basics of cloud services.', category: 'Cloud', prerequisites: [] }, { id: generateId(), title: 'Modern Web Dev', description: 'React & Node.js apps.', category: 'Web Dev', prerequisites: ['JS Basics'] }, { id: generateId(), title: 'Blockchain Fundamentals', description: 'Explore blockchain tech.', category: 'Blockchain', prerequisites: [] } ]; state.jobs = [ { id: generateId(), title: 'Cloud Engineer', company: 'Innovate Cloud', location: 'Remote', description: 'Manage cloud infra.', requirements: ['AWS/Azure', 'Linux', 'Scripting'], type: 'Full-time' }, { id: generateId(), title: 'AI/ML Intern', company: 'Data Driven', location: 'SF, CA', description: 'Assist ML model dev.', requirements: ['Python', 'ML Framework'], type: 'Internship' }, { id: generateId(), title: 'Web3 Dev', company: 'Decentralized Sys', location: 'Remote', description: 'Build dApps.', requirements: ['Solidity', 'React/Vue', 'Node.js'], type: 'Contract' } ]; state.guidanceRequests = []; state.currentUser = null; console.log("Default data init."); };

// --- UI Management ---
const showView = (viewId) => { console.log("Show view:", viewId); views.forEach(view => view.classList.remove('active')); const targetView = document.getElementById(viewId); if (targetView) targetView.classList.add('active'); else { document.getElementById('loginView').classList.add('active'); viewId = 'loginView'; } state.currentView = viewId; updateNav(); clearAlert(); if (state.isNotificationPanelOpen) toggleNotificationPanel(); setTimeout(() => { if (viewId === 'dashboardView' && state.currentUser) renderDashboard(); else if (viewId === 'coursesView') renderCourses(); else if (viewId === 'jobsView') renderJobs(); else if (viewId === 'guidanceView' && state.currentUser) renderGuidanceView(); else if (viewId === 'profileView' && state.currentUser) loadProfileForm(); else if (viewId === 'adminView' && state.currentUser?.profile?.isAdmin) renderAdminPanel(); else if (viewId === 'adminView' && !state.currentUser?.profile?.isAdmin) { showAlert('Access Denied.', 'error'); showView('dashboardView'); } }, 50); };
const updateNav = () => { navLinks.innerHTML = ''; if (state.currentUser) { navLinks.innerHTML = ` <li><a href="#" onclick="showView('dashboardView'); return false;">Dashboard</a></li> <li><a href="#" onclick="showView('coursesView'); return false;">Courses</a></li> <li><a href="#" onclick="showView('jobsView'); return false;">Jobs</a></li> <li><a href="#" onclick="showView('guidanceView'); return false;">Guidance</a></li> <li><a href="#" onclick="showView('profileView'); return false;">Profile</a></li> ${state.currentUser.profile?.isAdmin ? '<li><a href="#" onclick="showView(\'adminView\'); return false;">Admin</a></li>' : ''} <li class="notifications-li"> <span id="notificationBell" onclick="toggleNotificationPanel()" title="Notifications">🔔</span> <span id="notificationCount">0</span> </li> <li><span class="username">Hi, ${state.currentUser.profile?.name || state.currentUser.username}</span></li> <li><a href="#" onclick="logout(); return false;">Logout</a></li> `; updateNotificationBadge(); } else { navLinks.innerHTML = ` <li><a href="#" onclick="showView('loginView'); return false;">Login</a></li> <li><a href="#" onclick="showView('registerView'); return false;">Register</a></li> `; } };
const showAlert = (message, type = 'info') => { alertMessage.textContent = message; alertMessage.className = `alert-message ${type}-message active`; setTimeout(clearAlert, 5000); }; const clearAlert = () => { alertMessage.textContent = ''; alertMessage.className = 'alert-message'; };

// --- Authentication ---
const register = async (event) => { // Notice the 'async' keyword
    event.preventDefault();
    clearAlert();

    // 1. Get all the values from the form (this part is the same)
    const username = document.getElementById('registerUsername').value.trim();
    const email = document.getElementById('registerEmail').value.trim();
    const password = document.getElementById('registerPassword').value;
    const confirmPassword = document.getElementById('registerConfirmPassword').value;
    const name = document.getElementById('registerFullName').value.trim();
    const degree = document.getElementById('registerDegree').value.trim();

    // 2. Perform front-end validation (this part is also the same)
    if (!username || !email || !password || !name || !degree) return showAlert('All fields are required.', 'error');
    if (password !== confirmPassword) return showAlert('Passwords do not match.', 'error');
    // You can add more checks here if you want

    try {
        // 3. Send the data to the backend server (THIS IS THE NEW PART)
        // 'fetch' is the browser's tool for making network requests
        const response = await fetch('http://localhost:5000/api/users/register', {
            method: 'POST', // We are sending (POSTing) new data
            headers: {
                'Content-Type': 'application/json', // We are sending the data in JSON format
            },
            // Convert our JavaScript object into a JSON string to send
            body: JSON.stringify({ username, email, password, name, degree }),
        });

        // 4. Get the response back from the server
        const data = await response.json();

        // 5. Check if the server reported an error
        if (!response.ok) {
            // If the server sent an error (like "Username exists"), show it
            throw new Error(data.message);
        }

        // 6. If everything was successful
        showAlert('Registered! Please login.', 'success');
        registerForm.reset();
        showView('loginView');

    } catch (error) {
        // This will catch any network errors or errors from the server
        showAlert(error.message, 'error');
    }
};
const login = (event) => { event.preventDefault(); clearAlert(); const username = document.getElementById('loginUsername').value.trim(); const password = document.getElementById('loginPassword').value; const passwordHash = simpleHash(password); const user = state.users.find(u => u.username.toLowerCase() === username.toLowerCase() && u.passwordHash === passwordHash); if (user) { state.currentUser = user; if (!state.currentUser.notifications) state.currentUser.notifications = []; saveData(); loginForm.reset(); console.log(`User ${user.username} login.`); showView('dashboardView'); } else { showAlert('Invalid credentials.', 'error'); } };
const logout = () => { console.log(`User ${state.currentUser?.username} logout.`); state.currentUser = null; if (state.isNotificationPanelOpen) toggleNotificationPanel(); saveData(); showView('loginView'); };

// --- Core Features Rendering ---
const renderDashboard = () => { if (!state.currentUser) return; dashboardUsername.textContent = state.currentUser.profile?.name || state.currentUser.username; dashboardCourses.innerHTML = state.currentUser.registeredCourses.length === 0 ? '<li class="list-placeholder">No courses.</li>' : state.currentUser.registeredCourses.map(id => state.courses.find(c=>c.id===id)).filter(Boolean).map(c => `<li>${c.title}</li>`).join(''); dashboardJobs.innerHTML = state.currentUser.appliedJobs.length === 0 ? '<li class="list-placeholder">No applications.</li>' : state.currentUser.appliedJobs.map(id => state.jobs.find(j=>j.id===id)).filter(Boolean).map(j => `<li>${j.title} at ${j.company}</li>`).join(''); dashboardGuidance.innerHTML = state.currentUser.guidanceRequests.length === 0 ? '<li class="list-placeholder">No requests.</li>' : state.currentUser.guidanceRequests.map(id => state.guidanceRequests.find(g=>g.id===id)).filter(Boolean).map(g => `<li>${g.topic} <span class="small-text">(${g.status})</span></li>`).join(''); renderProgressList(); };
const renderCourses = () => { if (state.courses.length === 0) { courseList.innerHTML = '<li class="list-placeholder">No courses.</li>'; return; } courseList.innerHTML = state.courses.map(course => `<li><div><h4>${course.title}</h4><p>${course.description}</p><span>Category: ${course.category || 'N/A'}</span>${course.prerequisites?.length ? `<span>Prereqs: ${course.prerequisites.join(', ')}</span>` : ''}</div><div class="actions">${state.currentUser ? (state.currentUser.registeredCourses.includes(course.id) ? `<button disabled>Registered</button>` : `<button onclick="registerForCourse('${course.id}')">Register</button>`) : `<button onclick="showView('loginView')">Login</button>`}</div></li>`).join(''); };
const renderJobs = () => { const searchTerm = jobSearchInput.value.toLowerCase().trim(); const filteredJobs = state.jobs.filter(job =>!searchTerm || Object.values(job).join(' ').toLowerCase().includes(searchTerm)); if (filteredJobs.length === 0) { jobList.innerHTML = `<li class="list-placeholder">No jobs found.</li>`; return; } jobList.innerHTML = filteredJobs.map(job => `<li><div><h4>${job.title}</h4><p><strong>${job.company}</strong> - ${job.location}</p><p>${job.description}</p>${job.requirements?.length ? `<span>Reqs: ${job.requirements.join(', ')}</span>` : ''}<span>Type: ${job.type || 'N/A'}</span></div><div class="actions">${state.currentUser ? (state.currentUser.appliedJobs.includes(job.id) ? `<button disabled>Applied</button>` : `<button onclick="applyForJob('${job.id}')">Apply</button>`) : `<button onclick="showView('loginView')">Login</button>`}</div></li>`).join(''); };
const debouncedRenderJobs = debounce(renderJobs, 300);
const renderGuidanceView = () => { if (!state.currentUser) return; const userRequests = state.guidanceRequests.filter(req => req.userId === state.currentUser.id); myGuidanceRequests.innerHTML = userRequests.length === 0 ? '<li class="list-placeholder">No requests.</li>' : userRequests.sort((a, b) => new Date(b.requestDate || 0) - new Date(a.requestDate || 0)).map(req => `<li><div><h4>${req.topic}</h4><p>${req.details}</p><span>Status: <strong>${req.status}</strong></span>${req.response ? `<p style="margin-top: 10px; background-color: rgba(224, 242, 247, 0.8); padding: 8px; border-radius: 4px;"><strong style='color:#0277bd'>Admin:</strong> ${req.response}</p>` : ''}<span class="small-text">${req.requestDate ? new Date(req.requestDate).toLocaleDateString() : ''}</span></div></li>`).join(''); };
const renderProgressList = () => { if (!state.currentUser?.profile?.progress) { progressList.innerHTML = '<li class="list-placeholder">No progress.</li>'; return; } progressList.innerHTML = state.currentUser.profile.progress.length === 0 ? '<li class="list-placeholder">No progress yet.</li>' : state.currentUser.profile.progress.sort((a, b) => new Date(b.date) - new Date(a.date)).map((item) => { const originalIndex = state.currentUser.profile.progress.findIndex(p => p.date === item.date && p.text === item.text); return `<li><div>${item.text} <span class="small-text">- ${new Date(item.date).toLocaleDateString()}</span></div><div class="actions"><button class="secondary inline" onclick="removeProgressItem(${originalIndex})">X</button></div></li>`; }).join(''); };

// --- Feature Actions ---
const registerForCourse = (courseId) => { if (!state.currentUser) return showAlert('Login required.', 'error'); if (!state.currentUser.registeredCourses) state.currentUser.registeredCourses = []; if (!state.currentUser.registeredCourses.includes(courseId)) { const course = state.courses.find(c => c.id === courseId); if (!course) return showAlert('Course not found.', 'error'); state.currentUser.registeredCourses.push(courseId); saveData(); renderCourses(); if (state.currentView === 'dashboardView') renderDashboard(); showAlert(`Registered for "${course.title}"!`, 'success'); } else { showAlert('Already registered.', 'info'); } };
const applyForJob = (jobId) => { if (!state.currentUser) return showAlert('Login required.', 'error'); if (!state.currentUser.appliedJobs) state.currentUser.appliedJobs = []; if (!state.currentUser.appliedJobs.includes(jobId)) { const job = state.jobs.find(j => j.id === jobId); if (!job) return showAlert('Job not found.', 'error'); state.currentUser.appliedJobs.push(jobId); saveData(); renderJobs(); if (state.currentView === 'dashboardView') renderDashboard(); showAlert(`Applied for "${job.title}"!`, 'success'); } else { showAlert('Already applied.', 'info'); } };
const requestGuidance = (event) => { event.preventDefault(); if (!state.currentUser) return showAlert('Login required.', 'error'); const topic = document.getElementById('guidanceTopic').value.trim(); const details = document.getElementById('guidanceDetails').value.trim(); if (!topic || !details) { return showAlert('Topic/details required.', 'error'); } const newRequest = { id: generateId(), userId: state.currentUser.id, username: state.currentUser.username, topic, details, status: 'pending', response: '', requestDate: new Date().toISOString() }; state.guidanceRequests.push(newRequest); if (!state.currentUser.guidanceRequests) state.currentUser.guidanceRequests = []; state.currentUser.guidanceRequests.push(newRequest.id); saveData(); showAlert('Request submitted.', 'success'); guidanceForm.reset(); renderGuidanceView(); if (state.currentView === 'dashboardView') renderDashboard(); };
const loadProfileForm = () => { if (!state.currentUser?.profile) { showAlert('Cannot load profile.', 'error'); return; } const p = state.currentUser.profile; document.getElementById('profileFullName').value = p.name || ''; document.getElementById('profileEmail').value = state.currentUser.email || ''; document.getElementById('profileDegree').value = p.degree || ''; document.getElementById('profileSkills').value = p.skills?.join(', ') || ''; document.getElementById('profileGoals').value = p.goals || ''; };
const updateProfile = (event) => { event.preventDefault(); if (!state.currentUser) return; const name = document.getElementById('profileFullName').value.trim(); const degree = document.getElementById('profileDegree').value.trim(); const skills = document.getElementById('profileSkills').value.split(',').map(s => s.trim()).filter(Boolean); const goals = document.getElementById('profileGoals').value.trim(); const email = document.getElementById('profileEmail').value.trim(); if (!name || !degree || !email) { return showAlert('Name, Degree, Email required.', 'error'); } if (!/^\S+@\S+\.\S+$/.test(email)) { return showAlert('Invalid email.', 'error'); } if (email.toLowerCase() !== state.currentUser.email.toLowerCase()) { if (state.users.some(u => u.email.toLowerCase() === email.toLowerCase() && u.id !== state.currentUser.id)) { return showAlert('Email taken.', 'error'); } state.currentUser.email = email; } state.currentUser.profile = {...state.currentUser.profile, name, degree, skills, goals}; saveData(); showAlert('Profile updated.', 'success'); updateNav(); if (state.currentView === 'dashboardView') renderDashboard(); };
const trackProgress = (event) => { event.preventDefault(); if (!state.currentUser?.profile) return; const text = document.getElementById('progressEntry').value.trim(); if (!text) return showAlert('Enter milestone.', 'error'); const newItem = { text, date: new Date().toISOString() }; if (!Array.isArray(state.currentUser.profile.progress)) state.currentUser.profile.progress = []; state.currentUser.profile.progress.push(newItem); saveData(); renderProgressList(); progressForm.reset(); showAlert('Progress tracked.', 'success'); };
const removeProgressItem = (index) => { if (!state.currentUser?.profile?.progress?.[index]) return; const item = state.currentUser.profile.progress[index]; if (confirm(`Remove: "${item.text}"?`)) { state.currentUser.profile.progress.splice(index, 1); saveData(); renderProgressList(); showAlert('Item removed.', 'info'); } };

// --- Admin Panel ---
const renderAdminPanel = () => { if (!state.currentUser?.profile?.isAdmin) { showView('dashboardView'); return showAlert('Access Denied.', 'error'); } console.log("Render Admin"); renderAdminUsers(); renderAdminCourses(); renderAdminJobs(); renderAdminGuidanceRequests(); };
const renderAdminUsers = () => { adminUserTableBody.innerHTML = state.users.map(u => `<tr><td class="small-text">${u.id}</td><td>${u.username}</td><td>${u.email}</td><td>${u.profile?.name||'N/A'}</td><td>${u.profile?.isAdmin?'Y':'N'}</td><td><button class="inline secondary" onclick="adminDeleteUser('${u.id}')" ${u.profile?.isAdmin?'disabled':''}>Del</button>${!u.profile?.isAdmin ? `<button class="inline" onclick="adminToggleAdmin('${u.id}')">Make Admin</button>` : `<button class="inline secondary" onclick="adminToggleAdmin('${u.id}')">Revoke</button>`}</td></tr>`).join(''); };
const adminDeleteUser = (id) => { const idx = state.users.findIndex(u => u.id === id); if (idx === -1) return; const user = state.users[idx]; if (user.profile?.isAdmin) return alert('Cannot delete admin.'); if (confirm(`Delete user ${user.username}?`)) { state.users.splice(idx, 1); saveData(); renderAdminUsers(); showAlert(`User deleted.`, 'success'); } };
const adminToggleAdmin = (id) => { const user = state.users.find(u => u.id === id); if (!user) return; if (user.profile?.isAdmin && state.users.filter(u=>u.profile?.isAdmin).length <= 1) return alert('Cannot remove last admin.'); const action = user.profile?.isAdmin ? 'Revoke' : 'Grant'; if (confirm(`${action} admin for ${user.username}?`)) { user.profile.isAdmin = !user.profile.isAdmin; saveData(); renderAdminUsers(); showAlert(`Admin status updated.`, 'success'); } };
const renderAdminCourses = () => { adminCourseTableBody.innerHTML = state.courses.map(c => `<tr><td class="small-text">${c.id}</td><td>${c.title}</td><td>${c.category||'N/A'}</td><td><button class="inline" onclick="adminEditCourse('${c.id}')">Edit</button><button class="inline secondary" onclick="adminDeleteCourse('${c.id}')">Del</button></td></tr>`).join(''); if(!state.courses.length) adminCourseTableBody.innerHTML = '<tr><td colspan="4" class="list-placeholder">No courses.</td></tr>'; };
const adminAddCourse = (e) => { e.preventDefault(); const title = document.getElementById('adminCourseTitle').value.trim(); const desc = document.getElementById('adminCourseDesc').value.trim(); const cat = document.getElementById('adminCourseCategory').value.trim(); const prereqs = document.getElementById('adminCoursePrereqs').value.split(',').map(s=>s.trim()).filter(Boolean); if (!title || !desc) return showAlert('Title/Desc required.', 'error'); const newCourse = { id: generateId(), title, description: desc, category: cat||'N/A', prerequisites: prereqs }; state.courses.push(newCourse); saveData(); renderAdminCourses(); adminAddCourseForm.reset(); showAlert('Course added.', 'success'); };
const adminEditCourse = (id) => { const c = state.courses.find(c => c.id === id); if (!c) return; const title = prompt('Title:', c.title); if(title===null) return; const desc = prompt('Desc:', c.description); if(desc===null) return; const cat = prompt('Category:', c.category); if(cat===null) return; const prereqs = prompt('Prereqs:', c.prerequisites?.join(', ')); if(prereqs===null) return; c.title=title.trim()||c.title; c.description=desc.trim()||c.description; c.category=cat.trim()||'N/A'; c.prerequisites=prereqs.split(',').map(s=>s.trim()).filter(Boolean); saveData(); renderAdminCourses(); showAlert('Course updated.', 'success'); };
const adminDeleteCourse = (id) => { const idx = state.courses.findIndex(c => c.id === id); if (idx === -1) return; if (confirm(`Delete course "${state.courses[idx].title}"?`)) { state.courses.splice(idx, 1); state.users.forEach(u => { if (u.registeredCourses) u.registeredCourses = u.registeredCourses.filter(cid => cid !== id); }); saveData(); renderAdminCourses(); showAlert('Course deleted.', 'success'); } };
const renderAdminJobs = () => { adminJobTableBody.innerHTML = state.jobs.map(j => `<tr><td class="small-text">${j.id}</td><td>${j.title}</td><td>${j.company}</td><td>${j.location}</td><td>${j.type||'N/A'}</td><td><button class="inline" onclick="adminEditJob('${j.id}')">Edit</button><button class="inline secondary" onclick="adminDeleteJob('${j.id}')">Del</button></td></tr>`).join(''); if(!state.jobs.length) adminJobTableBody.innerHTML = '<tr><td colspan="6" class="list-placeholder">No jobs.</td></tr>'; };
const adminAddJob = (e) => { e.preventDefault(); const title=document.getElementById('adminJobTitle').value.trim(); const co=document.getElementById('adminJobCompany').value.trim(); const loc=document.getElementById('adminJobLocation').value.trim(); const desc=document.getElementById('adminJobDesc').value.trim(); const reqs=document.getElementById('adminJobReqs').value.split(',').map(s=>s.trim()).filter(Boolean); const type=document.getElementById('adminJobType').value; if (!title || !co || !loc || !desc) return showAlert('Required fields missing.', 'error'); const newJob = { id: generateId(), title, company: co, location: loc, description: desc, requirements: reqs, type }; state.jobs.push(newJob); saveData(); renderAdminJobs(); adminAddJobForm.reset(); showAlert('Job added.', 'success'); };
const adminEditJob = (id) => { const j = state.jobs.find(j => j.id === id); if (!j) return; const title = prompt('Title:', j.title); if(title===null) return; const co = prompt('Company:', j.company); if(co===null) return; const loc = prompt('Location:', j.location); if(loc===null) return; const desc = prompt('Desc:', j.description); if(desc===null) return; const reqs = prompt('Reqs:', j.requirements?.join(', ')); if(reqs===null) return; const type = prompt('Type:', j.type); if(type===null) return; j.title=title.trim()||j.title; j.company=co.trim()||j.company; j.location=loc.trim()||j.location; j.description=desc.trim()||j.description; j.requirements=reqs.split(',').map(s=>s.trim()).filter(Boolean); j.type=type.trim()||'N/A'; saveData(); renderAdminJobs(); showAlert('Job updated.', 'success'); };
const adminDeleteJob = (id) => { const idx = state.jobs.findIndex(j => j.id === id); if (idx === -1) return; if (confirm(`Delete job "${state.jobs[idx].title}"?`)) { state.jobs.splice(idx, 1); state.users.forEach(u => { if (u.appliedJobs) u.appliedJobs = u.appliedJobs.filter(jid => jid !== id); }); saveData(); renderAdminJobs(); showAlert('Job deleted.', 'success'); } };
const renderAdminGuidanceRequests = () => { const sorted = [...state.guidanceRequests].sort((a, b) => (a.status === 'pending' ? -1 : 1) - (b.status === 'pending' ? -1 : 1) || new Date(b.requestDate||0) - new Date(a.requestDate||0)); adminGuidanceTableBody.innerHTML = sorted.map(r => `<tr style="${r.status === 'pending' ? 'background-color: #fff3e0;' : ''}"><td class="small-text">${r.id}</td><td>${r.username||'N/A'}</td><td>${r.topic}</td><td><select onchange="adminUpdateGuidanceStatus('${r.id}', this.value)"><option value="pending" ${r.status==='pending'?'selected':''}>Pending</option><option value="reviewed" ${r.status==='reviewed'?'selected':''}>Reviewed</option><option value="completed" ${r.status==='completed'?'selected':''}>Completed</option></select></td><td><button class="inline" onclick="adminViewGuidanceDetails('${r.id}')">Details</button><button class="inline secondary" onclick="adminDeleteGuidanceRequest('${r.id}')">Del</button></td></tr>`).join(''); if(!state.guidanceRequests.length) adminGuidanceTableBody.innerHTML = '<tr><td colspan="5" class="list-placeholder">No requests.</td></tr>'; };
const adminUpdateGuidanceStatus = (id, status) => { const req = state.guidanceRequests.find(r => r.id === id); if (req && req.status !== status) { req.status = status; saveData(); renderAdminGuidanceRequests(); showAlert(`Request ${id} status updated.`, 'success'); } };

// --- Notification Functions ---
const createNotification = (userId, message, linkViewId = null) => { const targetUser = state.users.find(u => u.id === userId); if (!targetUser) { console.error(`Notify Error: User ${userId} not found.`); return; } const newNotification = { id: generateId(), timestamp: new Date().toISOString(), message, read: false, linkViewId }; if (!Array.isArray(targetUser.notifications)) targetUser.notifications = []; targetUser.notifications.unshift(newNotification); const MAX = 50; if (targetUser.notifications.length > MAX) targetUser.notifications.pop(); console.log(`Notify ${targetUser.username}: "${message}"`); saveData(); if (state.currentUser?.id === userId) { updateNotificationBadge(); if(state.isNotificationPanelOpen) renderNotifications(); } };
const updateNotificationBadge = () => { if (!state.currentUser?.notifications) return; const count = state.currentUser.notifications.filter(n => !n.read).length; const el = document.getElementById('notificationCount'); if (el) { if (count > 0) { el.textContent = count > 99 ? '99+' : count; el.classList.add('visible'); } else { el.classList.remove('visible'); } } };
const toggleNotificationPanel = () => { if (!state.currentUser) return; state.isNotificationPanelOpen = !state.isNotificationPanelOpen; if (state.isNotificationPanelOpen) { renderNotifications(); notificationPanel.classList.add('visible'); document.addEventListener('click', handleClickOutsidePanel, true); } else { notificationPanel.classList.remove('visible'); document.removeEventListener('click', handleClickOutsidePanel, true); } };
const handleClickOutsidePanel = (e) => { const bell = document.getElementById('notificationBell'); if (!notificationPanel.contains(e.target) && !bell?.contains(e.target)) { if (state.isNotificationPanelOpen) toggleNotificationPanel(); } };
const renderNotifications = () => { if (!state.currentUser?.notifications) { notificationList.innerHTML = '<li class="list-placeholder">Cannot load.</li>'; return; } const notifs = state.currentUser.notifications; notifs.sort((a, b) => (a.read ? 1 : -1) - (b.read ? 1 : -1) || new Date(b.timestamp) - new Date(a.timestamp)); if (notifs.length === 0) { notificationList.innerHTML = '<li class="list-placeholder">No notifications.</li>'; return; } notificationList.innerHTML = notifs.map(n => `<li class="${n.read ? 'read' : 'unread'}" id="notif-${n.id}"><div><span class="notification-message">${n.message}</span><span class="small-text">${new Date(n.timestamp).toLocaleString()}</span></div><div class="notification-actions">${!n.read ? `<button class="inline" onclick="markNotificationRead('${n.id}')" title="Mark Read">✔️</button>` : ''}${n.linkViewId ? `<button class="inline secondary" onclick="navigateToNotificationLink('${n.id}', '${n.linkViewId}')" title="Go">➡️</button>` : ''}</div></li>`).join(''); };
const markNotificationRead = (id) => { if (!state.currentUser) return; const notif = state.currentUser.notifications.find(n => n.id === id); if (notif && !notif.read) { notif.read = true; saveData(); const li = document.getElementById(`notif-${id}`); if(li) { li.classList.remove('unread'); li.classList.add('read'); const btn = li.querySelector('.notification-actions button:first-child'); if (btn && !li.querySelector('.notification-actions button.secondary')) li.querySelector('.notification-actions').innerHTML = ''; else if (btn) btn.remove(); } else { renderNotifications(); } updateNotificationBadge(); } };
const markAllNotificationsRead = () => { if (!state.currentUser) return; let changed = false; state.currentUser.notifications.forEach(n => { if (!n.read) { n.read = true; changed = true; } }); if (changed) { saveData(); renderNotifications(); updateNotificationBadge(); } };
const navigateToNotificationLink = (id, viewId) => { markNotificationRead(id); showView(viewId); };

// --- Admin Actions triggering Notifications ---
const adminViewGuidanceDetails = (reqId) => { const request = state.guidanceRequests.find(r => r.id === reqId); if (!request) return alert('Request not found.'); const user = state.users.find(u => u.id === request.userId); const userEmail = user ? user.email : 'N/A'; const currentResponse = request.response || ''; const promptMessage = `Request Details\nUser: ${request.username}\nTopic: ${request.topic}\nDetails: ${request.details}\n\nCurrent Response (Status: ${request.status}):\n${currentResponse || '(None)'}\n\nEnter response (DELETE to clear):`; const response = prompt(promptMessage, currentResponse); if (response !== null) { const trimmedResponse = response.trim(); let notificationMsg = null; let statusChanged = false; if (trimmedResponse.toUpperCase() === 'DELETE') { if(request.response) { notificationMsg = `Admin cleared response: "${request.topic}".`; request.response = ''; if (request.status === 'completed') { request.status = 'reviewed'; statusChanged = true; } showAlert('Response cleared.', 'info'); } else { return; } } else if (trimmedResponse && trimmedResponse !== currentResponse) { request.response = trimmedResponse; notificationMsg = `Admin responded: "${request.topic}".`; if (request.status !== 'completed') { request.status = 'completed'; statusChanged = true; } showAlert('Response saved' + (statusChanged ? ' & status set.' : '.'), 'success'); } else if (!trimmedResponse && currentResponse) { notificationMsg = `Admin cleared response: "${request.topic}".`; request.response = ''; if (request.status === 'completed') { request.status = 'reviewed'; statusChanged = true; } showAlert('Response cleared.', 'info'); } else { return; } saveData(); renderAdminGuidanceRequests(); if (notificationMsg && request.userId) { createNotification(request.userId, notificationMsg, 'guidanceView'); } } };
const adminDeleteGuidanceRequest = (reqId) => { const idx = state.guidanceRequests.findIndex(r => r.id === reqId); if (idx === -1) return; const req = state.guidanceRequests[idx]; if (confirm(`Delete request: "${req.topic}"?`)) { state.guidanceRequests.splice(idx, 1); state.users.forEach(u => { if(u.guidanceRequests) u.guidanceRequests = u.guidanceRequests.filter(id => id !== reqId); }); saveData(); renderAdminGuidanceRequests(); showAlert('Request deleted.', 'success'); } };

// --- Initialization ---
const init = () => { console.log("Initializing App..."); loadData(); loginForm.addEventListener('submit', login); registerForm.addEventListener('submit', register); guidanceForm.addEventListener('submit', requestGuidance); profileForm.addEventListener('submit', updateProfile); progressForm.addEventListener('submit', trackProgress); adminAddCourseForm.addEventListener('submit', adminAddCourse); adminAddJobForm.addEventListener('submit', adminAddJob); jobSearchInput.addEventListener('input', debouncedRenderJobs); if (state.currentUser) { showView('dashboardView'); } else { showView('loginView'); } console.log("Init complete."); };

// --- Run Application ---
document.addEventListener('DOMContentLoaded', init);